[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 StatTK authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/Standard.html","id":"names","dir":"Articles","previous_headings":"Variables","what":"Names","title":"Standard","text":"Variable names must written according camelCase convention. .e. entirely lower case except first letters second subsequent words. name variable try put extension separated dot. extension informs object class variable. extension must written entirely lower case must abbreviation. variables several possible object classes, separate extensions underscore.","code":""},{"path":"/articles/Standard.html","id":"extensions","dir":"Articles","previous_headings":"Variables","what":"Extensions","title":"Standard","text":".chr <character> … .pth <character> File path .dir <character> Directory path .num <numeric> … .int <numeric> Integer .ndx <numeric> Position Number .tim <numeric> Time .fac <factor> Factor .idn <factor character numeric> Identifier (unique) .lgk <logical function> Logical expression .bln <logical> Boolean .fun <function> Function .<> .lst <list> … .nst <list> Nested List .{*}_vec <*> Vector specific class .{*}_lst <list> list specific class .dtf <data.frame> … .tbl <tibble> … .mtx <matrix> … .spm <dgCMatrix dgRMatrix Matrix format> Sparse matrix .gnr <GRanges> … .gnp <Pairs> GeNomic ranges Pairs .gni <GInteractions> GeNomic Interactions .cmx <ContactMatrix> Contact Matrix .ggp <gg ggplot> ggplot object .col <character numeric list> color format","code":""},{"path":"/articles/Standard.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"Standard","text":"Functions names must written according camelCase convention. .e. entirely lower case except first letters words. name function action, verb question.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas Chanard. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chanard N (2022). StatTK: Set Statistical Tools. R package version 0.1.0.","code":"@Manual{,   title = {StatTK: Set of Statistical Tools},   author = {Nicolas Chanard},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"stattk-","dir":"","previous_headings":"","what":"Set of Statistical Tools","title":"Set of Statistical Tools","text":"StatTK set statistical tools.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Set of Statistical Tools","text":"can install development version StatTK GitHub :","code":"devtools::install_github(\"NChanard/StatTK\")"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Set of Statistical Tools","text":"StatTK","code":""},{"path":"/reference/BoxBlur.html","id":null,"dir":"Reference","previous_headings":"","what":"Blur a matrix. — BoxBlur","title":"Blur a matrix. — BoxBlur","text":"Blur matrix one dimensional kernel.","code":""},{"path":"/reference/BoxBlur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blur a matrix. — BoxBlur","text":"","code":"BoxBlur(mat.mtx, box.num = NULL, boxSize.num = NULL, sd.num = 1)"},{"path":"/reference/BoxBlur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blur a matrix. — BoxBlur","text":"mat.mtx <matrix>: numerical matrix. box.num <numeric>: numerical vector kernel. NULL apply GaussBox (see 'GaussBox' function) (Default NULL) boxSize.num <numeric>: box.num NULL, size kernel 'GaussBox' function. (Default NULL) sd.num <numeric>: box.num NULL,  standard deviation parameter 'GaussBox' function. (Default NULL)","code":""},{"path":"/reference/BoxBlur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blur a matrix. — BoxBlur","text":"Blurred matrix.","code":""},{"path":"/reference/BoxBlur.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Blur a matrix. — BoxBlur","text":"BoxBlur","code":""},{"path":"/reference/BoxBlur.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blur a matrix. — BoxBlur","text":"","code":"set.seed(981643) mat.mtx <- rnorm(10000,50,10)**3 |> matrix(100,100) heatmap(mat.mtx,Rowv=NA,Colv=NA)  heatmap(BoxBlur(mat.mtx),Rowv=NA,Colv=NA)"},{"path":"/reference/BreakVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a vector. — BreakVector","title":"Cut a vector. — BreakVector","text":"Compute n+1 breaks vector linear density based way possibility fix minimal, center maximal values.","code":""},{"path":"/reference/BreakVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a vector. — BreakVector","text":"","code":"BreakVector(   x.num = NULL,   min.num = NULL,   center.num = NULL,   max.num = NULL,   n.num = 10,   method.chr = \"linear\" )"},{"path":"/reference/BreakVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a vector. — BreakVector","text":"x.num <numeric>: numerical vector. min.num <numeric>: minimal fixed value. center.num <numeric>: center fixed value. max.num <numeric>: maximal fixed value. n.num <numeric>: number tile (return n.num+1 breaks). method.chr <character>: kind breaking. \"linear\" \"density\". (Default \"linear\")","code":""},{"path":"/reference/BreakVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a vector. — BreakVector","text":"Numerical vector breaks.","code":""},{"path":"/reference/BreakVector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cut a vector. — BreakVector","text":"BreakVector","code":""},{"path":"/reference/BreakVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a vector. — BreakVector","text":"","code":"set.seed(31415) x.num <- rnorm(100,50,200) BreakVector(x.num=x.num, n.num=9) #>  [1] -388.951506 -289.464576 -189.977646  -90.490716    8.996213  108.483143 #>  [7]  207.970073  307.457002  406.943932  506.430862"},{"path":"/reference/CbrtNorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cubic root normalization. — CbrtNorm","title":"Cubic root normalization. — CbrtNorm","text":"Normalize data cubic root adding constant value.","code":""},{"path":"/reference/CbrtNorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cubic root normalization. — CbrtNorm","text":"","code":"CbrtNorm(x.num, a.num = 0)"},{"path":"/reference/CbrtNorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cubic root normalization. — CbrtNorm","text":"x.num <numeric>: numerical vector. .num <numeric>: constant value add compute cubic root. (Default 0)","code":""},{"path":"/reference/CbrtNorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cubic root normalization. — CbrtNorm","text":"normalized vector.","code":""},{"path":"/reference/CbrtNorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cubic root normalization. — CbrtNorm","text":"CbrtNorm","code":""},{"path":"/reference/CbrtNorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cubic root normalization. — CbrtNorm","text":"","code":"set.seed(542972) x.num <- rnbinom(1000, 1, 0.01) plot(density(x.num))  plot(density(CbrtNorm(x.num, abs(min(x.num)))))"},{"path":"/reference/FindElbow.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the elbow point on a curve. — FindElbow","title":"Find the elbow point on a curve. — FindElbow","text":"Find elbow point curve.","code":""},{"path":"/reference/FindElbow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the elbow point on a curve. — FindElbow","text":"","code":"FindElbow(x.num, y.num)"},{"path":"/reference/FindElbow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the elbow point on a curve. — FindElbow","text":"x.num <numeric>: numeric vector x coordinates curve. y.num <numeric>: numeric vector y coordiantes curve.","code":""},{"path":"/reference/FindElbow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the elbow point on a curve. — FindElbow","text":"Numeric vector elbow coordinates.","code":""},{"path":"/reference/FindElbow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the elbow point on a curve. — FindElbow","text":"FindElbow","code":""},{"path":"/reference/FindElbow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the elbow point on a curve. — FindElbow","text":"","code":"x.num = 1:10 y.num = 1/sqrt(x.num) elbow = FindElbow(x.num, y.num) elbow #> [1] 4.0 0.5 plot(y.num~x.num,type='l') points(x=elbow[1],y=elbow[2])"},{"path":"/reference/Gauss.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian formula. — Gauss","title":"Gaussian formula. — Gauss","text":"Gaussian formula 1 2 dimension.","code":""},{"path":"/reference/Gauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian formula. — Gauss","text":"","code":"Gauss(x = NULL, y = NULL, sd.num = 1, mu = 0)"},{"path":"/reference/Gauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian formula. — Gauss","text":"x <numeric>: x value. y <numeric>: y value 2 dimensional gaussian. sd.num <numeric>: standard deviation parameter gaussian. (Default 1) mu <numeric>:  mean deviation parameter gaussian. (Default 0)","code":""},{"path":"/reference/Gauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian formula. — Gauss","text":"Result Gaussian formula","code":""},{"path":"/reference/Gauss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gaussian formula. — Gauss","text":"Gauss","code":""},{"path":"/reference/Gauss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian formula. — Gauss","text":"","code":"Gauss(x=1) #> [1] 0.2419707 Gauss(x=1,y=2) #> [1] 0.01306423"},{"path":"/reference/GaussBox.html","id":null,"dir":"Reference","previous_headings":"","what":"One dimension Gaussian kernel. — GaussBox","title":"One dimension Gaussian kernel. — GaussBox","text":"One dimension Gaussian kernel.","code":""},{"path":"/reference/GaussBox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One dimension Gaussian kernel. — GaussBox","text":"","code":"GaussBox(sd.num = 1, boxSize.num = NULL, scale.chr = \"1\")"},{"path":"/reference/GaussBox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One dimension Gaussian kernel. — GaussBox","text":"sd.num <numeric>: standard deviation parameter gaussian. (Default 1) boxSize.num <numeric>: size kernel. NULL size 1+4*sd.num (Default NULL) scale.chr <character>: scaling kind box. \"1\" sum kernel equal 1. \"int\" Minimal value kernel 1 entry integer. \"none\", kernel scale. (Default \"1\")","code":""},{"path":"/reference/GaussBox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One dimension Gaussian kernel. — GaussBox","text":"numerical vector.","code":""},{"path":"/reference/GaussBox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One dimension Gaussian kernel. — GaussBox","text":"GaussBox","code":""},{"path":"/reference/GaussBox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One dimension Gaussian kernel. — GaussBox","text":"","code":"GaussBox( scale.chr=\"none\") #> [1] 0.06072675 0.24172089 0.38261648 0.24172089 0.06072675 GaussBox( scale.chr=\"1\") #> [1] 0.06149471 0.24477773 0.38745511 0.24477773 0.06149471 sum(GaussBox( scale.chr=\"1\")) #> [1] 1 GaussBox( scale.chr=\"int\") #> [1] 1 4 7 4 1"},{"path":"/reference/GaussKernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Two dimension Gaussian kernel. — GaussKernel","title":"Two dimension Gaussian kernel. — GaussKernel","text":"Two dimension Gaussian kernel.","code":""},{"path":"/reference/GaussKernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two dimension Gaussian kernel. — GaussKernel","text":"","code":"GaussKernel(sd.num = 1, kernSize.num = NULL, scale.chr = c(\"1\"), by.num = 0.01)"},{"path":"/reference/GaussKernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two dimension Gaussian kernel. — GaussKernel","text":"sd.num <numeric>: standard deviation parameter gaussian. (Default 1) kernSize.num <numeric>: size kernel. null size 1+4*sd.num. (Default NULL) scale.chr <character>: scaling kind box. \"1\" sum kernel equal 1. \"int\" Minimal value kernel 1 entry integer. \"none\", kernel scale. (Default \"1\") .num <numerical>: step size compute Gaussian function two dimension (Default 0.01).","code":""},{"path":"/reference/GaussKernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two dimension Gaussian kernel. — GaussKernel","text":"numerical matrix.","code":""},{"path":"/reference/GaussKernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two dimension Gaussian kernel. — GaussKernel","text":"GaussKernel","code":""},{"path":"/reference/GaussKernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two dimension Gaussian kernel. — GaussKernel","text":"","code":"GaussKernel(scale.chr=c(\"none\")) #>             [,1]       [,2]       [,3]       [,4]        [,5] #> [1,] 0.003687738 0.01467892 0.02323506 0.01467892 0.003687738 #> [2,] 0.014678925 0.05842899 0.09248640 0.05842899 0.014678925 #> [3,] 0.023235056 0.09248640 0.14639537 0.09248640 0.023235056 #> [4,] 0.014678925 0.05842899 0.09248640 0.05842899 0.014678925 #> [5,] 0.003687738 0.01467892 0.02323506 0.01467892 0.003687738 GaussKernel(scale.chr=c(\"1\")) #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] 0.00378160 0.01505254 0.02382644 0.01505254 0.00378160 #> [2,] 0.01505254 0.05991614 0.09484038 0.05991614 0.01505254 #> [3,] 0.02382644 0.09484038 0.15012146 0.09484038 0.02382644 #> [4,] 0.01505254 0.05991614 0.09484038 0.05991614 0.01505254 #> [5,] 0.00378160 0.01505254 0.02382644 0.01505254 0.00378160 sum(GaussKernel(scale.chr=c(\"1\"))) #> [1] 1 GaussKernel(scale.chr=c(\"int\")) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    4    7    4    1 #> [2,]    4   16   26   16    4 #> [3,]    7   26   40   26    7 #> [4,]    4   16   26   16    4 #> [5,]    1    4    7    4    1"},{"path":"/reference/InterpolateNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate NA values in a vector. — InterpolateNA","title":"Interpolate NA values in a vector. — InterpolateNA","text":"Interpolation NA linear spline way.","code":""},{"path":"/reference/InterpolateNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate NA values in a vector. — InterpolateNA","text":"","code":"InterpolateNA(x.num, method.chr = \"spline\", ...)"},{"path":"/reference/InterpolateNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate NA values in a vector. — InterpolateNA","text":"x.num <numeric>: numerical vector NA. method.chr <character>: Kind interpolation \"linear\" \"spline\". (Default \"spline\") ... <...>: suplemantary parameters smooth.spline function.","code":""},{"path":"/reference/InterpolateNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate NA values in a vector. — InterpolateNA","text":"numerical vector.","code":""},{"path":"/reference/InterpolateNA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpolate NA values in a vector. — InterpolateNA","text":"InterpolateNA","code":""},{"path":"/reference/InterpolateNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate NA values in a vector. — InterpolateNA","text":"","code":"set.seed(20071) n <- 100 y.num <- sin(seq(0, 5*pi, length.out = n)) + rnorm(n=n, mean = 0, sd=0.1) y.num[sample(1:n,round(0.5*n))] <- NA plot(y.num)  plot(InterpolateNA(y.num,\"spline\"))  plot(InterpolateNA(y.num,\"linear\"))"},{"path":"/reference/IqrThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Find threshold for outliers triming based on inter quartile range. — IqrThreshold","title":"Find threshold for outliers triming based on inter quartile range. — IqrThreshold","text":"Find threshold outliers triming based inter quartile range.","code":""},{"path":"/reference/IqrThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find threshold for outliers triming based on inter quartile range. — IqrThreshold","text":"","code":"IqrThreshold(x.num = NULL, iqrFactor.num = 1.5, bounds.chr = \"both\")"},{"path":"/reference/IqrThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find threshold for outliers triming based on inter quartile range. — IqrThreshold","text":"x.num <numeric>: numeric vector. iqrFactor.num <numeric>: inter quartile range factor. (Default 1.5) bounds.chr <character>: bounds return, \"lower\", \"upper\" \"\". (Default \"\")","code":""},{"path":"/reference/IqrThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find threshold for outliers triming based on inter quartile range. — IqrThreshold","text":"numerical vector minmal /maximal thresholds values outliers triming.","code":""},{"path":"/reference/IqrThreshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find threshold for outliers triming based on inter quartile range. — IqrThreshold","text":"IqrThreshold","code":""},{"path":"/reference/IqrThreshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find threshold for outliers triming based on inter quartile range. — IqrThreshold","text":"","code":"set.seed(1111) x.num <- rnorm(1000) x.num <- sort(x.num) x.num #>    [1] -2.947230181 -2.930846364 -2.912295201 -2.652936167 -2.580330302 #>    [6] -2.436626893 -2.431943155 -2.420604816 -2.341488040 -2.220351734 #>   [11] -2.209953332 -2.185699706 -2.172483538 -2.172301277 -2.167865392 #>   [16] -2.126277548 -2.109910762 -2.091388684 -2.074594095 -2.059485800 #>   [21] -2.038177494 -2.021971391 -1.980041146 -1.966766209 -1.964391692 #>   [26] -1.954660943 -1.931494739 -1.929052710 -1.919957962 -1.914909614 #>   [31] -1.910171523 -1.894509057 -1.893494633 -1.885957093 -1.875262315 #>   [36] -1.875243371 -1.844869267 -1.837280339 -1.817001602 -1.808391197 #>   [41] -1.806897433 -1.795477691 -1.791919025 -1.753429287 -1.742806903 #>   [46] -1.741490319 -1.725168073 -1.711868465 -1.694731581 -1.669115136 #>   [51] -1.651650569 -1.644664938 -1.604379575 -1.592462991 -1.581747079 #>   [56] -1.576920440 -1.558082946 -1.556747882 -1.551084024 -1.550546561 #>   [61] -1.544527132 -1.544138733 -1.544102898 -1.540233632 -1.534281566 #>   [66] -1.529141625 -1.528639832 -1.528372247 -1.527316968 -1.523920534 #>   [71] -1.517031873 -1.511637433 -1.494651137 -1.489697312 -1.485401131 #>   [76] -1.483259788 -1.470764898 -1.469964404 -1.464296308 -1.436553257 #>   [81] -1.424585718 -1.423710084 -1.417146045 -1.412007482 -1.407908129 #>   [86] -1.407356958 -1.401833371 -1.401034520 -1.400753457 -1.400620638 #>   [91] -1.398668124 -1.393335051 -1.389753666 -1.389123423 -1.388434142 #>   [96] -1.372403852 -1.365287909 -1.358521395 -1.342954521 -1.342026771 #>  [101] -1.337070225 -1.335824952 -1.330461830 -1.330055926 -1.320978222 #>  [106] -1.320060700 -1.313694064 -1.312111742 -1.302291292 -1.300410941 #>  [111] -1.298721659 -1.288704411 -1.278172091 -1.274062753 -1.269309223 #>  [116] -1.267968089 -1.266397651 -1.265838808 -1.265373920 -1.263484521 #>  [121] -1.261845988 -1.248214152 -1.240952394 -1.238732312 -1.224770696 #>  [126] -1.222645818 -1.222311254 -1.213118937 -1.212720792 -1.205486795 #>  [131] -1.200430574 -1.197604800 -1.189648845 -1.181836277 -1.180997897 #>  [136] -1.173792485 -1.173592071 -1.171117963 -1.161528404 -1.157635514 #>  [141] -1.138359035 -1.136255216 -1.134188569 -1.133811699 -1.130981741 #>  [146] -1.130626768 -1.117923213 -1.112173619 -1.111229969 -1.110862786 #>  [151] -1.107689737 -1.105246204 -1.085359169 -1.073031577 -1.069377399 #>  [156] -1.067134093 -1.062626788 -1.058827708 -1.057826675 -1.055915729 #>  [161] -1.046911622 -1.045846963 -1.043976970 -1.043807666 -1.043213248 #>  [166] -1.040400574 -1.036833221 -1.035473334 -1.029792502 -1.029119085 #>  [171] -1.025291454 -1.021131771 -1.017906173 -1.004665705 -0.988565699 #>  [176] -0.985486661 -0.984847567 -0.982393992 -0.976479813 -0.972516986 #>  [181] -0.969798075 -0.968772186 -0.966178339 -0.965520355 -0.962480325 #>  [186] -0.961354034 -0.961303906 -0.961283310 -0.942364838 -0.937956644 #>  [191] -0.935834550 -0.930473789 -0.928613996 -0.926949132 -0.926277278 #>  [196] -0.924518632 -0.908383016 -0.903741128 -0.893864093 -0.884936520 #>  [201] -0.875223109 -0.871863261 -0.871052811 -0.868690181 -0.864315401 #>  [206] -0.862354930 -0.849821281 -0.849250535 -0.840631824 -0.835864132 #>  [211] -0.817929620 -0.802524115 -0.798987543 -0.790751049 -0.790429809 #>  [216] -0.786009593 -0.783612099 -0.782002877 -0.779936593 -0.774385348 #>  [221] -0.763438735 -0.763056132 -0.758359383 -0.753842657 -0.753310586 #>  [226] -0.751119049 -0.747153488 -0.741718275 -0.739093207 -0.738470438 #>  [231] -0.734717573 -0.723451566 -0.718621221 -0.718036605 -0.711567845 #>  [236] -0.707463457 -0.705527410 -0.703183505 -0.699488478 -0.699483972 #>  [241] -0.697286299 -0.695487669 -0.691972679 -0.691173357 -0.689367923 #>  [246] -0.683135622 -0.682975754 -0.679109184 -0.675737819 -0.672409634 #>  [251] -0.670629567 -0.670362293 -0.668765573 -0.668031234 -0.666763589 #>  [256] -0.664845590 -0.656327643 -0.655892874 -0.641058315 -0.639657740 #>  [261] -0.637251948 -0.629427062 -0.626246629 -0.625188582 -0.625012873 #>  [266] -0.618040459 -0.617984698 -0.617912106 -0.615274929 -0.613800618 #>  [271] -0.607431513 -0.603460785 -0.591079069 -0.586999465 -0.584036974 #>  [276] -0.580163745 -0.577563034 -0.576169268 -0.575885358 -0.575324865 #>  [281] -0.573548067 -0.573169275 -0.562571813 -0.559121408 -0.557207007 #>  [286] -0.556605548 -0.553447159 -0.547906556 -0.547872283 -0.546944588 #>  [291] -0.544496499 -0.541231591 -0.541141032 -0.540885969 -0.537510827 #>  [296] -0.537085307 -0.533295786 -0.530863226 -0.526446698 -0.525587885 #>  [301] -0.524828533 -0.520787002 -0.520517356 -0.519421824 -0.516570926 #>  [306] -0.511095682 -0.504953477 -0.504437049 -0.499943430 -0.499132813 #>  [311] -0.498738767 -0.493859643 -0.491755717 -0.490464936 -0.489673344 #>  [316] -0.488761946 -0.486043023 -0.485730243 -0.485545662 -0.483701339 #>  [321] -0.481592418 -0.481377931 -0.479013677 -0.478201092 -0.477670785 #>  [326] -0.472026756 -0.471192741 -0.468862784 -0.468251672 -0.466456291 #>  [331] -0.464694771 -0.462937050 -0.458570159 -0.456985660 -0.451772892 #>  [336] -0.450317211 -0.437523927 -0.433176508 -0.431032163 -0.429894248 #>  [341] -0.429539384 -0.421830180 -0.421320189 -0.420822776 -0.416014205 #>  [346] -0.413552483 -0.409620798 -0.409338986 -0.400875312 -0.399592534 #>  [351] -0.399102177 -0.398307333 -0.391203006 -0.389101325 -0.388950714 #>  [356] -0.378412762 -0.373146067 -0.372026477 -0.371066763 -0.367060544 #>  [361] -0.366859878 -0.366624947 -0.363822233 -0.356168194 -0.355781755 #>  [366] -0.353648706 -0.344666548 -0.343347691 -0.340041200 -0.336624057 #>  [371] -0.335697049 -0.324987285 -0.324230584 -0.323795678 -0.313582760 #>  [376] -0.309547142 -0.308313094 -0.304579634 -0.302221752 -0.300497491 #>  [381] -0.298330352 -0.290258438 -0.289524284 -0.289491870 -0.289282413 #>  [386] -0.281183125 -0.280251079 -0.279641026 -0.278461947 -0.277989036 #>  [391] -0.274810135 -0.269390635 -0.269141798 -0.265865315 -0.263239617 #>  [396] -0.262859801 -0.260673279 -0.259743332 -0.259192741 -0.259115883 #>  [401] -0.258978478 -0.258243004 -0.257651852 -0.257140149 -0.248040215 #>  [406] -0.247451977 -0.247409181 -0.244814249 -0.243268192 -0.242465523 #>  [411] -0.239355919 -0.238466722 -0.238266703 -0.235949104 -0.234955098 #>  [416] -0.234449922 -0.233049792 -0.231593571 -0.229156383 -0.228676068 #>  [421] -0.227203758 -0.222185627 -0.221839860 -0.219355235 -0.216710897 #>  [426] -0.208876577 -0.208776400 -0.206591992 -0.204068004 -0.200660107 #>  [431] -0.198585488 -0.196642334 -0.196377084 -0.194747300 -0.193242787 #>  [436] -0.190636546 -0.189061982 -0.187655743 -0.176356978 -0.175629520 #>  [441] -0.175367327 -0.175314609 -0.173700457 -0.167069456 -0.165657987 #>  [446] -0.165386221 -0.157770873 -0.150117504 -0.150102308 -0.148860957 #>  [451] -0.146184323 -0.145367696 -0.141768356 -0.140623817 -0.139923313 #>  [456] -0.139113759 -0.133982699 -0.130818631 -0.130021137 -0.128610065 #>  [461] -0.124503806 -0.117470862 -0.115694473 -0.112057075 -0.110612503 #>  [466] -0.109510669 -0.107475145 -0.107395231 -0.107182433 -0.104948992 #>  [471] -0.101729460 -0.100654867 -0.097906683 -0.097550548 -0.097001086 #>  [476] -0.093037532 -0.092455603 -0.091431840 -0.088752533 -0.086580111 #>  [481] -0.084227732 -0.081097497 -0.080512606 -0.072772042 -0.072202695 #>  [486] -0.067079317 -0.055572118 -0.054886927 -0.047753028 -0.047297143 #>  [491] -0.045704598 -0.044848506 -0.041039063 -0.039997391 -0.039941426 #>  [496] -0.039840281 -0.039050204 -0.039049733 -0.037072947 -0.034704382 #>  [501] -0.028364641 -0.026624214 -0.026204640 -0.024877659 -0.024372547 #>  [506] -0.021091330 -0.019303407 -0.017205308 -0.015323041 -0.015308128 #>  [511] -0.011131732 -0.010285154 -0.008265104 -0.003755814 -0.002647985 #>  [516]  0.001449927  0.002159399  0.002737608  0.008145257  0.013705825 #>  [521]  0.019832320  0.021954070  0.024167607  0.027759423  0.028240143 #>  [526]  0.030910710  0.031640760  0.035887069  0.039179343  0.043938726 #>  [531]  0.046032467  0.051503977  0.052579261  0.054528997  0.062655793 #>  [536]  0.063629063  0.064629140  0.066559497  0.068663596  0.069597703 #>  [541]  0.072837834  0.073267627  0.080944592  0.081154820  0.085354844 #>  [546]  0.088679798  0.094705820  0.095058647  0.098236935  0.099197377 #>  [551]  0.104168140  0.105199816  0.111220864  0.112310964  0.112967824 #>  [556]  0.115618636  0.116167950  0.116290309  0.120855468  0.122367046 #>  [561]  0.124368690  0.126634583  0.127134851  0.127575121  0.129802528 #>  [566]  0.136949333  0.137739519  0.147362593  0.151120022  0.153433690 #>  [571]  0.158267485  0.158705781  0.159120433  0.161062095  0.164032285 #>  [576]  0.164795941  0.168124855  0.169293151  0.170600506  0.171558729 #>  [581]  0.171895276  0.176022012  0.176273417  0.179108882  0.182793592 #>  [586]  0.183082223  0.183273838  0.189319504  0.189739097  0.190466472 #>  [591]  0.200547942  0.202914848  0.207718279  0.209868641  0.210247253 #>  [596]  0.211943936  0.216307660  0.218034284  0.219215567  0.223142935 #>  [601]  0.223791396  0.228110856  0.230311742  0.230383911  0.233324058 #>  [606]  0.233526626  0.234822189  0.235896440  0.236624872  0.241025268 #>  [611]  0.242893210  0.244244166  0.244613101  0.245959028  0.257352334 #>  [616]  0.257369932  0.261629943  0.264504506  0.268611602  0.274312766 #>  [621]  0.277312001  0.279551757  0.281711077  0.282894875  0.285135127 #>  [626]  0.295591914  0.295737734  0.304742660  0.306398684  0.307956642 #>  [631]  0.308866175  0.313015511  0.315029722  0.316571240  0.319986620 #>  [636]  0.322069652  0.324957278  0.327012979  0.336794768  0.338268121 #>  [641]  0.339307629  0.341422006  0.344480524  0.348195434  0.355116837 #>  [646]  0.355633083  0.358348059  0.358858023  0.360241997  0.369884879 #>  [651]  0.371116991  0.374091170  0.378054472  0.380396629  0.380960030 #>  [656]  0.382917618  0.384087275  0.385292241  0.386098386  0.387796710 #>  [661]  0.392956082  0.397314775  0.406324236  0.410810413  0.416434684 #>  [666]  0.417591399  0.418293932  0.419407882  0.424349333  0.424742337 #>  [671]  0.427158441  0.428717542  0.429916218  0.430451404  0.433504940 #>  [676]  0.438021367  0.439565049  0.441879880  0.444508735  0.447608280 #>  [681]  0.464760426  0.466707755  0.471172949  0.476977185  0.478316477 #>  [686]  0.483160527  0.495660352  0.500326140  0.501706643  0.502504560 #>  [691]  0.503482964  0.506513393  0.507838836  0.509876520  0.510517866 #>  [696]  0.512770024  0.512968779  0.513484246  0.521074765  0.523690088 #>  [701]  0.527461973  0.527506852  0.529915500  0.532816722  0.535059926 #>  [706]  0.536893664  0.537989721  0.546763071  0.547215986  0.547683343 #>  [711]  0.554031585  0.554730474  0.566006526  0.569019022  0.573512772 #>  [716]  0.575445065  0.578194571  0.581046312  0.582011324  0.585108484 #>  [721]  0.587825673  0.588104217  0.589733037  0.589769903  0.590383219 #>  [726]  0.591914877  0.591967342  0.598642923  0.599111375  0.599705431 #>  [731]  0.600615748  0.600697040  0.601710575  0.602106948  0.603027591 #>  [736]  0.606182010  0.608497745  0.613708887  0.614355752  0.618441652 #>  [741]  0.618755311  0.619785473  0.620890630  0.624769017  0.627220188 #>  [746]  0.629436731  0.632143849  0.632496544  0.632913523  0.639702038 #>  [751]  0.662222800  0.675238729  0.677180638  0.677508062  0.677600299 #>  [756]  0.678981486  0.690164261  0.690890080  0.692755539  0.693263358 #>  [761]  0.694189454  0.695719258  0.697545336  0.700105215  0.701910957 #>  [766]  0.703300281  0.705863606  0.705896092  0.713011829  0.717795761 #>  [771]  0.724791403  0.732646249  0.736406072  0.741449369  0.741920730 #>  [776]  0.742138109  0.743216806  0.744159360  0.745866033  0.747034695 #>  [781]  0.749509285  0.750057241  0.750988849  0.751203437  0.755560661 #>  [786]  0.765446248  0.771625511  0.772116933  0.777305689  0.788383861 #>  [791]  0.791723586  0.795715088  0.796363580  0.812017373  0.815185456 #>  [796]  0.824333812  0.825116243  0.825427664  0.826675535  0.829759228 #>  [801]  0.829822529  0.835610612  0.836033925  0.836935475  0.837227018 #>  [806]  0.838491977  0.840614872  0.846840964  0.858948368  0.859881043 #>  [811]  0.860591459  0.862467392  0.863904684  0.863984701  0.869009542 #>  [816]  0.875988352  0.879533158  0.882316888  0.884420209  0.886553238 #>  [821]  0.886961524  0.889390214  0.917667294  0.918321630  0.931423916 #>  [826]  0.932985725  0.934701470  0.935750390  0.936608985  0.939324857 #>  [831]  0.943637246  0.949593078  0.958981246  0.963011807  0.966441815 #>  [836]  0.970853354  0.973904505  0.979566568  0.979809184  0.990836348 #>  [841]  0.991168374  0.995157304  1.002796926  1.012213730  1.015172840 #>  [846]  1.015963483  1.025390598  1.027761817  1.034005496  1.034486388 #>  [851]  1.038146318  1.040261559  1.040291057  1.043064389  1.048464843 #>  [856]  1.055472189  1.059940931  1.065478652  1.069276566  1.069696450 #>  [861]  1.076015070  1.076946358  1.082082122  1.096181669  1.098007545 #>  [866]  1.102786639  1.104648595  1.106915765  1.107128655  1.109801855 #>  [871]  1.116469593  1.117771943  1.130024756  1.130430903  1.137429288 #>  [876]  1.139619832  1.142146524  1.143714723  1.152029004  1.152553365 #>  [881]  1.156927791  1.160889997  1.162688022  1.170417719  1.170646708 #>  [886]  1.174786565  1.176332681  1.183422400  1.190255627  1.190711366 #>  [891]  1.198091847  1.199901180  1.201406635  1.205821957  1.209338251 #>  [896]  1.220509885  1.221696185  1.228332070  1.229445488  1.231904859 #>  [901]  1.232635287  1.234758436  1.235963395  1.239970195  1.240002500 #>  [906]  1.248118356  1.255254604  1.258909883  1.268180355  1.273527812 #>  [911]  1.283940856  1.286563933  1.289770210  1.290886551  1.301807250 #>  [916]  1.307376533  1.317149485  1.322524430  1.335711301  1.336993480 #>  [921]  1.341059582  1.372666535  1.374343897  1.381437060  1.384047521 #>  [926]  1.394747168  1.395198440  1.403646422  1.404528907  1.406110110 #>  [931]  1.407638371  1.414181843  1.431466661  1.434440269  1.435175758 #>  [936]  1.439807142  1.446492865  1.469775802  1.470722632  1.474726867 #>  [941]  1.475148938  1.477291715  1.483426295  1.484387448  1.505263250 #>  [946]  1.510713688  1.511484254  1.514912696  1.522116812  1.523758115 #>  [951]  1.527520659  1.530136104  1.541604453  1.546027276  1.582125226 #>  [956]  1.640363260  1.650831792  1.660297478  1.660921380  1.662907915 #>  [961]  1.678565685  1.694387605  1.697998059  1.713295931  1.719329908 #>  [966]  1.737624481  1.750855530  1.753974301  1.761500831  1.768999773 #>  [971]  1.770061998  1.773267506  1.785197031  1.792594231  1.820611067 #>  [976]  1.823822933  1.826297521  1.842873630  1.915882229  1.930540245 #>  [981]  2.002383304  2.013086021  2.037915530  2.067347819  2.134162292 #>  [986]  2.158101129  2.228291187  2.239164612  2.285147434  2.361631481 #>  [991]  2.398250568  2.433557088  2.446660821  2.502845342  2.543264108 #>  [996]  2.581766558  2.615128742  2.666984567  2.817220633  2.973465222 IqrThreshold(x.num, bounds.chr=\"lower\") #>      <NA>      <NA>  #> -2.645685        NA  IqrThreshold(x.num, bounds.chr=\"both\") #>      <NA>      <NA>  #> -2.645685  2.619942  IqrThreshold(x.num, bounds.chr=\"upper\") #>     <NA>     <NA>  #>       NA 2.619942"},{"path":"/reference/Log2Norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Log2 normalization. — Log2Norm","title":"Log2 normalization. — Log2Norm","text":"Normalize data logarithme (base 2) adding constant value.","code":""},{"path":"/reference/Log2Norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log2 normalization. — Log2Norm","text":"","code":"Log2Norm(x.num, a.num = 0)"},{"path":"/reference/Log2Norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log2 normalization. — Log2Norm","text":"x.num <numeric>: numerical vector. .num <numeric>: constant value add compute cubic root. (Default 0)","code":""},{"path":"/reference/Log2Norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log2 normalization. — Log2Norm","text":"normalized vector.","code":""},{"path":"/reference/Log2Norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log2 normalization. — Log2Norm","text":"Log2Norm","code":""},{"path":"/reference/Log2Norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log2 normalization. — Log2Norm","text":"","code":"set.seed(542972) x.num <- rnbinom(1000, 1, 0.01) plot(density(x.num))  plot(density(Log2Norm(x.num, abs(min(x.num)))))"},{"path":"/reference/MeanScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale values by mean. — MeanScale","title":"Scale values by mean. — MeanScale","text":"Scale values mean.","code":""},{"path":"/reference/MeanScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale values by mean. — MeanScale","text":"","code":"MeanScale(x.num)"},{"path":"/reference/MeanScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale values by mean. — MeanScale","text":"x.num <numeric>: numerical vector.","code":""},{"path":"/reference/MeanScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale values by mean. — MeanScale","text":"scaled numeric vector.","code":""},{"path":"/reference/MeanScale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale values by mean. — MeanScale","text":"MeanScale","code":""},{"path":"/reference/MeanScale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale values by mean. — MeanScale","text":"","code":"set.seed(655213) x.num <- rnorm(500,500) set.seed(522613) y.num <- rnorm(500,100) plot(density(x.num),col=\"red\",xlim=c(min(y.num),max(x.num ))) lines(density(y.num),col=\"green\")  plot(density(MeanScale(x.num)),col=\"red\",xlim=c(min(MeanScale(y.num)),max(MeanScale(x.num) ))) lines(density(MeanScale(y.num)),col=\"green\")"},{"path":"/reference/MedianSkewness.html","id":null,"dir":"Reference","previous_headings":"","what":"Pearson median skewness. — MedianSkewness","title":"Pearson median skewness. — MedianSkewness","text":"Pearson median skewness.","code":""},{"path":"/reference/MedianSkewness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pearson median skewness. — MedianSkewness","text":"","code":"MedianSkewness(x.num)"},{"path":"/reference/MedianSkewness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pearson median skewness. — MedianSkewness","text":"x.num <numeric>: numerical vector.","code":""},{"path":"/reference/MedianSkewness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pearson median skewness. — MedianSkewness","text":"skewness value.","code":""},{"path":"/reference/MedianSkewness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pearson median skewness. — MedianSkewness","text":"MedianSkewness","code":""},{"path":"/reference/MedianSkewness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pearson median skewness. — MedianSkewness","text":"","code":"set.seed(542972) MedianSkewness(rnbinom(10000, 1, 0.01)) #> [1] 0.9362693 set.seed(542972) MedianSkewness(rnorm(10000, 1, 0.01)) #> [1] 0.01257619"},{"path":"/reference/MinMaxScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales values on min-max range. — MinMaxScale","title":"Scales values on min-max range. — MinMaxScale","text":"Scale values min-max range.","code":""},{"path":"/reference/MinMaxScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales values on min-max range. — MinMaxScale","text":"","code":"MinMaxScale(x.num, min.num = (0), max.num = 1)"},{"path":"/reference/MinMaxScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales values on min-max range. — MinMaxScale","text":"x.num <numeric>: numerical vector. min.num <numeric>: minimal value scaling. max.num <numeric>: maximal value scaling.","code":""},{"path":"/reference/MinMaxScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scales values on min-max range. — MinMaxScale","text":"scaled numeric vector.","code":""},{"path":"/reference/MinMaxScale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scales values on min-max range. — MinMaxScale","text":"MinMaxScale","code":""},{"path":"/reference/MinMaxScale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scales values on min-max range. — MinMaxScale","text":"","code":"set.seed(655213) x.num <- rnorm(500,500) set.seed(522613) y.num <- rnorm(500,100) plot(density(x.num),col=\"red\",xlim=c(min(y.num),max(x.num ))) lines(density(y.num),col=\"green\")  plot(density(MinMaxScale(x.num)),col=\"red\",xlim=c(min(MinMaxScale(y.num)),max(MinMaxScale(x.num)))) lines(density(MinMaxScale(y.num)),col=\"green\")"},{"path":"/reference/Normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize data. — Normalize","title":"Normalize data. — Normalize","text":"Normalize data square root, cubic root log2 based minimal skewness.","code":""},{"path":"/reference/Normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize data. — Normalize","text":"","code":"Normalize(x.num = NULL, a.num = NULL)"},{"path":"/reference/Normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize data. — Normalize","text":"x.num <numeric>: numerical vector .num <numeric>: constant value add compute normalisation avoid negativ number. null auto dertermine .num. (Default NULL)","code":""},{"path":"/reference/Normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize data. — Normalize","text":"Normalized vector","code":""},{"path":"/reference/Normalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize data. — Normalize","text":"Normalize","code":""},{"path":"/reference/Normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize data. — Normalize","text":"","code":"set.seed(542972) x.num <- rnbinom(1000, 1, 0.01) plot(density(x.num))  plot(density(Normalize(x.num)))"},{"path":"/reference/Plus.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum by removing NA. — Plus","title":"Sum by removing NA. — Plus","text":"Perform sum removing NA. values NA return NA instead 0.","code":""},{"path":"/reference/Plus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum by removing NA. — Plus","text":"","code":"Plus(x)"},{"path":"/reference/Plus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum by removing NA. — Plus","text":"x <numerical>: numerical vector","code":""},{"path":"/reference/Plus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum by removing NA. — Plus","text":"sum numbers.","code":""},{"path":"/reference/Plus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sum by removing NA. — Plus","text":"Plus","code":""},{"path":"/reference/Plus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum by removing NA. — Plus","text":"","code":"Plus(c(1,2,3)) #> [1] 6 sum(c(1,2,3),na.rm=TRUE) #> [1] 6 sum(c(1,2,3)) #> [1] 6 Plus(c(1,2,NA)) #> [1] 3 sum(c(1,2,NA),na.rm=TRUE) #> [1] 3 sum(c(1,2,NA)) #> [1] NA Plus(c(NA,NA,NA)) #> [1] NA sum(c(NA,NA,NA),na.rm=TRUE) #> [1] 0 sum(c(NA,NA,NA)) #> [1] NA"},{"path":"/reference/QtlThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Find threshold for outliers triming based on quantiles. — QtlThreshold","title":"Find threshold for outliers triming based on quantiles. — QtlThreshold","text":"Find threshold outliers triming based quantiles.","code":""},{"path":"/reference/QtlThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find threshold for outliers triming based on quantiles. — QtlThreshold","text":"","code":"QtlThreshold(x.num = NULL, prct.num = 5, bounds.chr = \"both\")"},{"path":"/reference/QtlThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find threshold for outliers triming based on quantiles. — QtlThreshold","text":"x.num <numeric>: numeric vector. prct.num <numeric>: percentage (0-100) threshold. (Default 5) bounds.chr <character>: bounds return, \"lower\", \"upper\" \"\". (Default \"\")","code":""},{"path":"/reference/QtlThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find threshold for outliers triming based on quantiles. — QtlThreshold","text":"numerical vector thresholds values outliers triming.","code":""},{"path":"/reference/QtlThreshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find threshold for outliers triming based on quantiles. — QtlThreshold","text":"QtlThreshold","code":""},{"path":"/reference/QtlThreshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find threshold for outliers triming based on quantiles. — QtlThreshold","text":"","code":"set.seed(1111) x.num <- 0:100 x.num <- sort(x.num) x.num #>   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 #>  [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35 #>  [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53 #>  [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 #>  [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89 #>  [91]  90  91  92  93  94  95  96  97  98  99 100 QtlThreshold(x.num, prct.num=5, bounds.chr=\"lower\") #> 5%     #>  5 NA  QtlThreshold(x.num, prct.num=5, bounds.chr=\"both\") #>  2.5% 97.5%  #>   2.5  97.5  QtlThreshold(x.num, prct.num=5, bounds.chr=\"upper\") #>     95%  #>  NA  95"},{"path":"/reference/RobustScalarScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust scalar sclaing. — RobustScalarScale","title":"Robust scalar sclaing. — RobustScalarScale","text":"Scale values robust scalar method.","code":""},{"path":"/reference/RobustScalarScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust scalar sclaing. — RobustScalarScale","text":"","code":"RobustScalarScale(x.num)"},{"path":"/reference/RobustScalarScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust scalar sclaing. — RobustScalarScale","text":"x.num <numeric>: numerical vector.","code":""},{"path":"/reference/RobustScalarScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust scalar sclaing. — RobustScalarScale","text":"scaled numeric vector.","code":""},{"path":"/reference/RobustScalarScale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Robust scalar sclaing. — RobustScalarScale","text":"RobustScalarScale","code":""},{"path":"/reference/RobustScalarScale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust scalar sclaing. — RobustScalarScale","text":"","code":"set.seed(655213) x.num <- rnorm(500,500) set.seed(522613) y.num <- rnorm(500,100) plot(density(x.num),col=\"red\",xlim=c(min(y.num),max(x.num ))) lines(density(y.num),col=\"green\")  plot(density(RobustScalarScale(x.num)),      col=\"red\",      xlim=c(          min(RobustScalarScale(y.num)),          max(RobustScalarScale(x.num) ))) lines(density(RobustScalarScale(y.num)),col=\"green\")"},{"path":"/reference/SdThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Find threshold for outliers triming based on standard deviation. — SdThreshold","title":"Find threshold for outliers triming based on standard deviation. — SdThreshold","text":"Find threshold outliers triming based standard deviation.","code":""},{"path":"/reference/SdThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find threshold for outliers triming based on standard deviation. — SdThreshold","text":"","code":"SdThreshold(x.num = NULL, sdThreshold.num = 3, bounds.chr = \"both\")"},{"path":"/reference/SdThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find threshold for outliers triming based on standard deviation. — SdThreshold","text":"x.num <numeric>: numeric vector. sdThreshold.num <numeric>: number standard deviation. (Default 3) bounds.chr <character>: bounds return, \"lower\", \"upper\" \"\". (Default \"\")","code":""},{"path":"/reference/SdThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find threshold for outliers triming based on standard deviation. — SdThreshold","text":"numerical vector thresholds values outliers triming","code":""},{"path":"/reference/SdThreshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find threshold for outliers triming based on standard deviation. — SdThreshold","text":"SdThreshold","code":""},{"path":"/reference/SdThreshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find threshold for outliers triming based on standard deviation. — SdThreshold","text":"","code":"set.seed(1111) x.num <- rnorm(1000) x.num <- sort(x.num) x.num #>    [1] -2.947230181 -2.930846364 -2.912295201 -2.652936167 -2.580330302 #>    [6] -2.436626893 -2.431943155 -2.420604816 -2.341488040 -2.220351734 #>   [11] -2.209953332 -2.185699706 -2.172483538 -2.172301277 -2.167865392 #>   [16] -2.126277548 -2.109910762 -2.091388684 -2.074594095 -2.059485800 #>   [21] -2.038177494 -2.021971391 -1.980041146 -1.966766209 -1.964391692 #>   [26] -1.954660943 -1.931494739 -1.929052710 -1.919957962 -1.914909614 #>   [31] -1.910171523 -1.894509057 -1.893494633 -1.885957093 -1.875262315 #>   [36] -1.875243371 -1.844869267 -1.837280339 -1.817001602 -1.808391197 #>   [41] -1.806897433 -1.795477691 -1.791919025 -1.753429287 -1.742806903 #>   [46] -1.741490319 -1.725168073 -1.711868465 -1.694731581 -1.669115136 #>   [51] -1.651650569 -1.644664938 -1.604379575 -1.592462991 -1.581747079 #>   [56] -1.576920440 -1.558082946 -1.556747882 -1.551084024 -1.550546561 #>   [61] -1.544527132 -1.544138733 -1.544102898 -1.540233632 -1.534281566 #>   [66] -1.529141625 -1.528639832 -1.528372247 -1.527316968 -1.523920534 #>   [71] -1.517031873 -1.511637433 -1.494651137 -1.489697312 -1.485401131 #>   [76] -1.483259788 -1.470764898 -1.469964404 -1.464296308 -1.436553257 #>   [81] -1.424585718 -1.423710084 -1.417146045 -1.412007482 -1.407908129 #>   [86] -1.407356958 -1.401833371 -1.401034520 -1.400753457 -1.400620638 #>   [91] -1.398668124 -1.393335051 -1.389753666 -1.389123423 -1.388434142 #>   [96] -1.372403852 -1.365287909 -1.358521395 -1.342954521 -1.342026771 #>  [101] -1.337070225 -1.335824952 -1.330461830 -1.330055926 -1.320978222 #>  [106] -1.320060700 -1.313694064 -1.312111742 -1.302291292 -1.300410941 #>  [111] -1.298721659 -1.288704411 -1.278172091 -1.274062753 -1.269309223 #>  [116] -1.267968089 -1.266397651 -1.265838808 -1.265373920 -1.263484521 #>  [121] -1.261845988 -1.248214152 -1.240952394 -1.238732312 -1.224770696 #>  [126] -1.222645818 -1.222311254 -1.213118937 -1.212720792 -1.205486795 #>  [131] -1.200430574 -1.197604800 -1.189648845 -1.181836277 -1.180997897 #>  [136] -1.173792485 -1.173592071 -1.171117963 -1.161528404 -1.157635514 #>  [141] -1.138359035 -1.136255216 -1.134188569 -1.133811699 -1.130981741 #>  [146] -1.130626768 -1.117923213 -1.112173619 -1.111229969 -1.110862786 #>  [151] -1.107689737 -1.105246204 -1.085359169 -1.073031577 -1.069377399 #>  [156] -1.067134093 -1.062626788 -1.058827708 -1.057826675 -1.055915729 #>  [161] -1.046911622 -1.045846963 -1.043976970 -1.043807666 -1.043213248 #>  [166] -1.040400574 -1.036833221 -1.035473334 -1.029792502 -1.029119085 #>  [171] -1.025291454 -1.021131771 -1.017906173 -1.004665705 -0.988565699 #>  [176] -0.985486661 -0.984847567 -0.982393992 -0.976479813 -0.972516986 #>  [181] -0.969798075 -0.968772186 -0.966178339 -0.965520355 -0.962480325 #>  [186] -0.961354034 -0.961303906 -0.961283310 -0.942364838 -0.937956644 #>  [191] -0.935834550 -0.930473789 -0.928613996 -0.926949132 -0.926277278 #>  [196] -0.924518632 -0.908383016 -0.903741128 -0.893864093 -0.884936520 #>  [201] -0.875223109 -0.871863261 -0.871052811 -0.868690181 -0.864315401 #>  [206] -0.862354930 -0.849821281 -0.849250535 -0.840631824 -0.835864132 #>  [211] -0.817929620 -0.802524115 -0.798987543 -0.790751049 -0.790429809 #>  [216] -0.786009593 -0.783612099 -0.782002877 -0.779936593 -0.774385348 #>  [221] -0.763438735 -0.763056132 -0.758359383 -0.753842657 -0.753310586 #>  [226] -0.751119049 -0.747153488 -0.741718275 -0.739093207 -0.738470438 #>  [231] -0.734717573 -0.723451566 -0.718621221 -0.718036605 -0.711567845 #>  [236] -0.707463457 -0.705527410 -0.703183505 -0.699488478 -0.699483972 #>  [241] -0.697286299 -0.695487669 -0.691972679 -0.691173357 -0.689367923 #>  [246] -0.683135622 -0.682975754 -0.679109184 -0.675737819 -0.672409634 #>  [251] -0.670629567 -0.670362293 -0.668765573 -0.668031234 -0.666763589 #>  [256] -0.664845590 -0.656327643 -0.655892874 -0.641058315 -0.639657740 #>  [261] -0.637251948 -0.629427062 -0.626246629 -0.625188582 -0.625012873 #>  [266] -0.618040459 -0.617984698 -0.617912106 -0.615274929 -0.613800618 #>  [271] -0.607431513 -0.603460785 -0.591079069 -0.586999465 -0.584036974 #>  [276] -0.580163745 -0.577563034 -0.576169268 -0.575885358 -0.575324865 #>  [281] -0.573548067 -0.573169275 -0.562571813 -0.559121408 -0.557207007 #>  [286] -0.556605548 -0.553447159 -0.547906556 -0.547872283 -0.546944588 #>  [291] -0.544496499 -0.541231591 -0.541141032 -0.540885969 -0.537510827 #>  [296] -0.537085307 -0.533295786 -0.530863226 -0.526446698 -0.525587885 #>  [301] -0.524828533 -0.520787002 -0.520517356 -0.519421824 -0.516570926 #>  [306] -0.511095682 -0.504953477 -0.504437049 -0.499943430 -0.499132813 #>  [311] -0.498738767 -0.493859643 -0.491755717 -0.490464936 -0.489673344 #>  [316] -0.488761946 -0.486043023 -0.485730243 -0.485545662 -0.483701339 #>  [321] -0.481592418 -0.481377931 -0.479013677 -0.478201092 -0.477670785 #>  [326] -0.472026756 -0.471192741 -0.468862784 -0.468251672 -0.466456291 #>  [331] -0.464694771 -0.462937050 -0.458570159 -0.456985660 -0.451772892 #>  [336] -0.450317211 -0.437523927 -0.433176508 -0.431032163 -0.429894248 #>  [341] -0.429539384 -0.421830180 -0.421320189 -0.420822776 -0.416014205 #>  [346] -0.413552483 -0.409620798 -0.409338986 -0.400875312 -0.399592534 #>  [351] -0.399102177 -0.398307333 -0.391203006 -0.389101325 -0.388950714 #>  [356] -0.378412762 -0.373146067 -0.372026477 -0.371066763 -0.367060544 #>  [361] -0.366859878 -0.366624947 -0.363822233 -0.356168194 -0.355781755 #>  [366] -0.353648706 -0.344666548 -0.343347691 -0.340041200 -0.336624057 #>  [371] -0.335697049 -0.324987285 -0.324230584 -0.323795678 -0.313582760 #>  [376] -0.309547142 -0.308313094 -0.304579634 -0.302221752 -0.300497491 #>  [381] -0.298330352 -0.290258438 -0.289524284 -0.289491870 -0.289282413 #>  [386] -0.281183125 -0.280251079 -0.279641026 -0.278461947 -0.277989036 #>  [391] -0.274810135 -0.269390635 -0.269141798 -0.265865315 -0.263239617 #>  [396] -0.262859801 -0.260673279 -0.259743332 -0.259192741 -0.259115883 #>  [401] -0.258978478 -0.258243004 -0.257651852 -0.257140149 -0.248040215 #>  [406] -0.247451977 -0.247409181 -0.244814249 -0.243268192 -0.242465523 #>  [411] -0.239355919 -0.238466722 -0.238266703 -0.235949104 -0.234955098 #>  [416] -0.234449922 -0.233049792 -0.231593571 -0.229156383 -0.228676068 #>  [421] -0.227203758 -0.222185627 -0.221839860 -0.219355235 -0.216710897 #>  [426] -0.208876577 -0.208776400 -0.206591992 -0.204068004 -0.200660107 #>  [431] -0.198585488 -0.196642334 -0.196377084 -0.194747300 -0.193242787 #>  [436] -0.190636546 -0.189061982 -0.187655743 -0.176356978 -0.175629520 #>  [441] -0.175367327 -0.175314609 -0.173700457 -0.167069456 -0.165657987 #>  [446] -0.165386221 -0.157770873 -0.150117504 -0.150102308 -0.148860957 #>  [451] -0.146184323 -0.145367696 -0.141768356 -0.140623817 -0.139923313 #>  [456] -0.139113759 -0.133982699 -0.130818631 -0.130021137 -0.128610065 #>  [461] -0.124503806 -0.117470862 -0.115694473 -0.112057075 -0.110612503 #>  [466] -0.109510669 -0.107475145 -0.107395231 -0.107182433 -0.104948992 #>  [471] -0.101729460 -0.100654867 -0.097906683 -0.097550548 -0.097001086 #>  [476] -0.093037532 -0.092455603 -0.091431840 -0.088752533 -0.086580111 #>  [481] -0.084227732 -0.081097497 -0.080512606 -0.072772042 -0.072202695 #>  [486] -0.067079317 -0.055572118 -0.054886927 -0.047753028 -0.047297143 #>  [491] -0.045704598 -0.044848506 -0.041039063 -0.039997391 -0.039941426 #>  [496] -0.039840281 -0.039050204 -0.039049733 -0.037072947 -0.034704382 #>  [501] -0.028364641 -0.026624214 -0.026204640 -0.024877659 -0.024372547 #>  [506] -0.021091330 -0.019303407 -0.017205308 -0.015323041 -0.015308128 #>  [511] -0.011131732 -0.010285154 -0.008265104 -0.003755814 -0.002647985 #>  [516]  0.001449927  0.002159399  0.002737608  0.008145257  0.013705825 #>  [521]  0.019832320  0.021954070  0.024167607  0.027759423  0.028240143 #>  [526]  0.030910710  0.031640760  0.035887069  0.039179343  0.043938726 #>  [531]  0.046032467  0.051503977  0.052579261  0.054528997  0.062655793 #>  [536]  0.063629063  0.064629140  0.066559497  0.068663596  0.069597703 #>  [541]  0.072837834  0.073267627  0.080944592  0.081154820  0.085354844 #>  [546]  0.088679798  0.094705820  0.095058647  0.098236935  0.099197377 #>  [551]  0.104168140  0.105199816  0.111220864  0.112310964  0.112967824 #>  [556]  0.115618636  0.116167950  0.116290309  0.120855468  0.122367046 #>  [561]  0.124368690  0.126634583  0.127134851  0.127575121  0.129802528 #>  [566]  0.136949333  0.137739519  0.147362593  0.151120022  0.153433690 #>  [571]  0.158267485  0.158705781  0.159120433  0.161062095  0.164032285 #>  [576]  0.164795941  0.168124855  0.169293151  0.170600506  0.171558729 #>  [581]  0.171895276  0.176022012  0.176273417  0.179108882  0.182793592 #>  [586]  0.183082223  0.183273838  0.189319504  0.189739097  0.190466472 #>  [591]  0.200547942  0.202914848  0.207718279  0.209868641  0.210247253 #>  [596]  0.211943936  0.216307660  0.218034284  0.219215567  0.223142935 #>  [601]  0.223791396  0.228110856  0.230311742  0.230383911  0.233324058 #>  [606]  0.233526626  0.234822189  0.235896440  0.236624872  0.241025268 #>  [611]  0.242893210  0.244244166  0.244613101  0.245959028  0.257352334 #>  [616]  0.257369932  0.261629943  0.264504506  0.268611602  0.274312766 #>  [621]  0.277312001  0.279551757  0.281711077  0.282894875  0.285135127 #>  [626]  0.295591914  0.295737734  0.304742660  0.306398684  0.307956642 #>  [631]  0.308866175  0.313015511  0.315029722  0.316571240  0.319986620 #>  [636]  0.322069652  0.324957278  0.327012979  0.336794768  0.338268121 #>  [641]  0.339307629  0.341422006  0.344480524  0.348195434  0.355116837 #>  [646]  0.355633083  0.358348059  0.358858023  0.360241997  0.369884879 #>  [651]  0.371116991  0.374091170  0.378054472  0.380396629  0.380960030 #>  [656]  0.382917618  0.384087275  0.385292241  0.386098386  0.387796710 #>  [661]  0.392956082  0.397314775  0.406324236  0.410810413  0.416434684 #>  [666]  0.417591399  0.418293932  0.419407882  0.424349333  0.424742337 #>  [671]  0.427158441  0.428717542  0.429916218  0.430451404  0.433504940 #>  [676]  0.438021367  0.439565049  0.441879880  0.444508735  0.447608280 #>  [681]  0.464760426  0.466707755  0.471172949  0.476977185  0.478316477 #>  [686]  0.483160527  0.495660352  0.500326140  0.501706643  0.502504560 #>  [691]  0.503482964  0.506513393  0.507838836  0.509876520  0.510517866 #>  [696]  0.512770024  0.512968779  0.513484246  0.521074765  0.523690088 #>  [701]  0.527461973  0.527506852  0.529915500  0.532816722  0.535059926 #>  [706]  0.536893664  0.537989721  0.546763071  0.547215986  0.547683343 #>  [711]  0.554031585  0.554730474  0.566006526  0.569019022  0.573512772 #>  [716]  0.575445065  0.578194571  0.581046312  0.582011324  0.585108484 #>  [721]  0.587825673  0.588104217  0.589733037  0.589769903  0.590383219 #>  [726]  0.591914877  0.591967342  0.598642923  0.599111375  0.599705431 #>  [731]  0.600615748  0.600697040  0.601710575  0.602106948  0.603027591 #>  [736]  0.606182010  0.608497745  0.613708887  0.614355752  0.618441652 #>  [741]  0.618755311  0.619785473  0.620890630  0.624769017  0.627220188 #>  [746]  0.629436731  0.632143849  0.632496544  0.632913523  0.639702038 #>  [751]  0.662222800  0.675238729  0.677180638  0.677508062  0.677600299 #>  [756]  0.678981486  0.690164261  0.690890080  0.692755539  0.693263358 #>  [761]  0.694189454  0.695719258  0.697545336  0.700105215  0.701910957 #>  [766]  0.703300281  0.705863606  0.705896092  0.713011829  0.717795761 #>  [771]  0.724791403  0.732646249  0.736406072  0.741449369  0.741920730 #>  [776]  0.742138109  0.743216806  0.744159360  0.745866033  0.747034695 #>  [781]  0.749509285  0.750057241  0.750988849  0.751203437  0.755560661 #>  [786]  0.765446248  0.771625511  0.772116933  0.777305689  0.788383861 #>  [791]  0.791723586  0.795715088  0.796363580  0.812017373  0.815185456 #>  [796]  0.824333812  0.825116243  0.825427664  0.826675535  0.829759228 #>  [801]  0.829822529  0.835610612  0.836033925  0.836935475  0.837227018 #>  [806]  0.838491977  0.840614872  0.846840964  0.858948368  0.859881043 #>  [811]  0.860591459  0.862467392  0.863904684  0.863984701  0.869009542 #>  [816]  0.875988352  0.879533158  0.882316888  0.884420209  0.886553238 #>  [821]  0.886961524  0.889390214  0.917667294  0.918321630  0.931423916 #>  [826]  0.932985725  0.934701470  0.935750390  0.936608985  0.939324857 #>  [831]  0.943637246  0.949593078  0.958981246  0.963011807  0.966441815 #>  [836]  0.970853354  0.973904505  0.979566568  0.979809184  0.990836348 #>  [841]  0.991168374  0.995157304  1.002796926  1.012213730  1.015172840 #>  [846]  1.015963483  1.025390598  1.027761817  1.034005496  1.034486388 #>  [851]  1.038146318  1.040261559  1.040291057  1.043064389  1.048464843 #>  [856]  1.055472189  1.059940931  1.065478652  1.069276566  1.069696450 #>  [861]  1.076015070  1.076946358  1.082082122  1.096181669  1.098007545 #>  [866]  1.102786639  1.104648595  1.106915765  1.107128655  1.109801855 #>  [871]  1.116469593  1.117771943  1.130024756  1.130430903  1.137429288 #>  [876]  1.139619832  1.142146524  1.143714723  1.152029004  1.152553365 #>  [881]  1.156927791  1.160889997  1.162688022  1.170417719  1.170646708 #>  [886]  1.174786565  1.176332681  1.183422400  1.190255627  1.190711366 #>  [891]  1.198091847  1.199901180  1.201406635  1.205821957  1.209338251 #>  [896]  1.220509885  1.221696185  1.228332070  1.229445488  1.231904859 #>  [901]  1.232635287  1.234758436  1.235963395  1.239970195  1.240002500 #>  [906]  1.248118356  1.255254604  1.258909883  1.268180355  1.273527812 #>  [911]  1.283940856  1.286563933  1.289770210  1.290886551  1.301807250 #>  [916]  1.307376533  1.317149485  1.322524430  1.335711301  1.336993480 #>  [921]  1.341059582  1.372666535  1.374343897  1.381437060  1.384047521 #>  [926]  1.394747168  1.395198440  1.403646422  1.404528907  1.406110110 #>  [931]  1.407638371  1.414181843  1.431466661  1.434440269  1.435175758 #>  [936]  1.439807142  1.446492865  1.469775802  1.470722632  1.474726867 #>  [941]  1.475148938  1.477291715  1.483426295  1.484387448  1.505263250 #>  [946]  1.510713688  1.511484254  1.514912696  1.522116812  1.523758115 #>  [951]  1.527520659  1.530136104  1.541604453  1.546027276  1.582125226 #>  [956]  1.640363260  1.650831792  1.660297478  1.660921380  1.662907915 #>  [961]  1.678565685  1.694387605  1.697998059  1.713295931  1.719329908 #>  [966]  1.737624481  1.750855530  1.753974301  1.761500831  1.768999773 #>  [971]  1.770061998  1.773267506  1.785197031  1.792594231  1.820611067 #>  [976]  1.823822933  1.826297521  1.842873630  1.915882229  1.930540245 #>  [981]  2.002383304  2.013086021  2.037915530  2.067347819  2.134162292 #>  [986]  2.158101129  2.228291187  2.239164612  2.285147434  2.361631481 #>  [991]  2.398250568  2.433557088  2.446660821  2.502845342  2.543264108 #>  [996]  2.581766558  2.615128742  2.666984567  2.817220633  2.973465222 SdThreshold(x.num, sdThreshold.num=2, bounds.chr=\"lower\") #> [1] -2.010379        NA SdThreshold(x.num, sdThreshold.num=2, bounds.chr=\"both\") #> [1] -2.010379  1.957867 SdThreshold(x.num, sdThreshold.num=2, bounds.chr=\"upper\") #> [1]       NA 1.957867"},{"path":"/reference/SqrtNorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Square root normalization. — SqrtNorm","title":"Square root normalization. — SqrtNorm","text":"Normalize data square root adding constant value.","code":""},{"path":"/reference/SqrtNorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Square root normalization. — SqrtNorm","text":"","code":"SqrtNorm(x.num, a.num = 0)"},{"path":"/reference/SqrtNorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Square root normalization. — SqrtNorm","text":"x.num <numeric>: Numerical vector. .num <numeric>: Constant value add compute square root. (Default 0)","code":""},{"path":"/reference/SqrtNorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Square root normalization. — SqrtNorm","text":"Normalized vector.","code":""},{"path":"/reference/SqrtNorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Square root normalization. — SqrtNorm","text":"SqrtNorm.","code":""},{"path":"/reference/SqrtNorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Square root normalization. — SqrtNorm","text":"","code":"set.seed(542972) x.num <- rnbinom(1000, 1, 0.01) plot(density(x.num))  plot(density(SqrtNorm(x.num, abs(min(x.num)))))"},{"path":"/reference/TrimOutliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove outliers. — TrimOutliers","title":"Remove outliers. — TrimOutliers","text":"Replace values numerical vector minimal thresholds /maximal thresholds.","code":""},{"path":"/reference/TrimOutliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove outliers. — TrimOutliers","text":"","code":"TrimOutliers(x.num, tresholds.num = SdThreshold(x.num), clip.bln = FALSE)"},{"path":"/reference/TrimOutliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove outliers. — TrimOutliers","text":"x.num <numeric>: numeric vector. tresholds.num <numeric>: numeric vector length 2. first value minimal threshold, second value maximal threshold (Default find threshold based standarrd deviation. see `SdThreshold` function) clip.bln <logical>: TRUE value bounds replace threshodls values. FALSE Values bound replace NA (Default FALSE).","code":""},{"path":"/reference/TrimOutliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove outliers. — TrimOutliers","text":"trimed Numerical vector.","code":""},{"path":"/reference/TrimOutliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove outliers. — TrimOutliers","text":"TrimOutliers","code":""},{"path":"/reference/TrimOutliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove outliers. — TrimOutliers","text":"","code":"set.seed(1111) x.num = rnorm(1000) x.num = sort(x.num) x.num[990:1000] #>  [1] 2.361631 2.398251 2.433557 2.446661 2.502845 2.543264 2.581767 2.615129 #>  [9] 2.666985 2.817221 2.973465 SdThreshold(x.num) #> [1] -3.002440  2.949928 TrimOutliers(x.num)[990:1000] #>  [1] 2.361631 2.398251 2.433557 2.446661 2.502845 2.543264 2.581767 2.615129 #>  [9] 2.666985 2.817221       NA TrimOutliers(x.num, clip=TRUE)[990:1000] #>  [1] 2.361631 2.398251 2.433557 2.446661 2.502845 2.543264 2.581767 2.615129 #>  [9] 2.666985 2.817221 2.949928"},{"path":"/reference/UnitLengthScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Unit length scaling. — UnitLengthScale","title":"Unit length scaling. — UnitLengthScale","text":"Scale values unit lenght method.","code":""},{"path":"/reference/UnitLengthScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unit length scaling. — UnitLengthScale","text":"","code":"UnitLengthScale(x.num)"},{"path":"/reference/UnitLengthScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unit length scaling. — UnitLengthScale","text":"x.num <numeric>: numerical vector.","code":""},{"path":"/reference/UnitLengthScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unit length scaling. — UnitLengthScale","text":"scaled numeric vector.","code":""},{"path":"/reference/UnitLengthScale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unit length scaling. — UnitLengthScale","text":"UnitLengthScale","code":""},{"path":"/reference/UnitLengthScale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unit length scaling. — UnitLengthScale","text":"","code":"set.seed(655213) x.num <- rnorm(500,500) set.seed(522613) y.num <- rnorm(500,100) plot(density(x.num),col=\"red\",xlim=c(min(y.num),max(x.num ))) lines(density(y.num),col=\"green\")  plot(density(UnitLengthScale(x.num)),      col=\"red\",      xlim=c(          min(UnitLengthScale(y.num)),          max(UnitLengthScale(x.num) ))) lines(density(UnitLengthScale(y.num)),col=\"green\")"},{"path":"/reference/compound.html","id":null,"dir":"Reference","previous_headings":"","what":"Assignment pipe — %<>%","title":"Assignment pipe — %<>%","text":"See magrittr::%<>% details.","code":""},{"path":"/reference/compound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assignment pipe — %<>%","text":"","code":"lhs %<>% rhs"},{"path":"/reference/compound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assignment pipe — %<>%","text":"lhs object serves initial value target. rhs function call using magrittr semantics.","code":""},{"path":"/reference/compound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assignment pipe — %<>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""}]
